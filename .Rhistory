training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(mixtures$CompressiveStrength)
plot(cut2(mixtures$CompressiveStrength))
qplot(CompressiveStrength,colours=Cement,data=mixtures)
qplot(CompressiveStrength,colour=Cement,data=mixtures)
qplot(inTrain,CompressiveStrength,colour=Cement,data=mixtures)
qplot(inTrain,CompressiveStrength,colour=Cement,data=training)
names(mixtures)
qplot(inTrain,CompressiveStrength,colour=FlyAsh,data=training)
qplot(inTrain,CompressiveStrength,colour=Water,data=training)
qplot(inTrain,CompressiveStrength,colour=Superplasticizer,data=training)
qplot(inTrain,CompressiveStrength,colour=CoarseAggregate,data=training)
qplot(inTrain,CompressiveStrength,colour=FineAggregate,data=training)
qplot(inTrain,CompressiveStrength,colour=Age,data=training)
cutCement<- cut2(training$Cement)
qplot(inTrain,cutCement,colour=Cement,data=training)
cutIndex<- cut2(inTrain)
qplot(inTrain,cutIndex,colour=Cement,data=training)
cutIndex<- cut2(inTrain)
qplot(cutIndex,CompressiveStrength,colour=Cement,data=training)
cutCement<- cut2(training$Cement)
qplot(cutIndex,CompressiveStrength,colour=cutCement,data=training)
cutFlyAsh<- cut2(training$FlyAsh)
qplot(inTrain,CompressiveStrength,colour=cutFlyAsh,data=training)
cutAge<- cut2(training$Age)
qplot(inTrain,CompressiveStrength,colour=cutAge,data=training)
cutFlyAsh<- cut2(training$FlyAsh)
qplot(inTrain,CompressiveStrength,colour=cutFlyAsh,data=training)
cutBlastFurnaceSlag<- cut2(training$BlastFurnaceSlag)
qplot(inTrain,CompressiveStrength,colour=cutBlastFurnaceSlag,data=training)
cutWater<- cut2(training$Water)
qplot(inTrain,CompressiveStrength,colour=Water,data=training)
cutWater<- cut2(training$Water)
qplot(inTrain,CompressiveStrength,colour=cutWater,data=training)
cutSuperplasticizer<- cut2(training$Superplasticizer)
qplot(inTrain,CompressiveStrength,colour=Superplasticizer,data=training)
cutSuperplasticizer<- cut2(training$Superplasticizer)
qplot(inTrain,CompressiveStrength,colour=cutSuperplasticizer,data=training)
cutCoarseAggregate<- cut2(training$CoarseAggregate)
qplot(inTrain,CompressiveStrength,colour=cutCoarseAggregate,data=training)
cutFineAggregate<- cut2(training$FineAggregate)
qplot(inTrain,CompressiveStrength,colour=cutFineAggregate,data=training)
cutFlyAsh<- cut2(training$FlyAsh)
qplot(inTrain,CompressiveStrength,colour=cutFlyAsh,data=training)
View(mixtures)
summary(mixtures)
log(0)
summary(mixtures)
hist(mixtures$Superplasticizer)
hist(log(mixtures$Superplasticizer)+1)
data("iris")
data("iris")
library("ggplot")
library(ggplot2)
names(iris)
table(iris$Species)
library(carret)
library(caret)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training)
dim(testing)
qplot(Petal.Width,Sepal.Width,colour=Species,data=training)
modFit <- train(Species ~., method="rpart",data=training)
install.packages("e1071")
install.packages("e1071")
modFit <- train(Species ~., method="rpart",data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform = TRUE, main="Classification Tree")
text(modFit$finalModel, use.n = TRUE, all=TRUE, cex =.8)
install.packages("rattle")
install.packages("Rgtk2")
install.packages("RGtk2")
knitr::opts_chunk$set(echo = FALSE)
library(knitr)
library(caret)
library(dplyr)
library(ggplot2)
library(utils)
set.seed(301)
trainingUrl <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testingUrl <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainingFile <- "traininig.csv"
testingFile <- "testing.csv"
download.file(url=trainingUrl,destfile= trainingFile, quiet = TRUE)
download.file(url=testingUrl,destfile= testingFile, quiet = TRUE)
trainingRawData <- read.csv(trainingFile)
testingRawData  <- read.csv(testingFile)
inTrain  <- createDataPartition(trainingRawData$classe, p=0.7, list=FALSE)
trainSet <- trainingRawData[inTrain, ]
testSet  <- trainingRawData[-inTrain, ]
summary(trainingRawData)
install.packages("caret")
View(testingRawData)
View(trainSet)
download.file(url=trainingUrl,destfile= trainingFile, quiet = TRUE)
knitr::opts_chunk$set(echo = FALSE)
install.packages("knitr")
knitr::opts_chunk$set(echo = FALSE)
library(knitr)
library(caret)
install.packages("ggplot2")
install.packages("ggplot2")
knitr::opts_chunk$set(echo = FALSE)
library(knitr)
library(caret)
knitr::opts_chunk$set(echo = FALSE)
library(knitr)
library(ggplot2)
library(caret)
install.packages("car")
knitr::opts_chunk$set(echo = FALSE)
library(knitr)
library(ggplot2)
library(caret)
set.seed(123)
trainingUrl <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testingUrl <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainingFile <- "traininig.csv"
testingFile <- "testing.csv"
download.file(url=trainingUrl,destfile= trainingFile, quiet = TRUE)
download.file(url=testingUrl,destfile= testingFile, quiet = TRUE)
trainingRawData <- read.csv(trainingFile)
testingRawData  <- read.csv(testingFile)
View(trainingRawData)
names(trainingRawData)
View(testingRawData)
trainingRawData <- trainingRawData[,c(2,9:11,37:45,60:68,113:121,151:160)]
View(trainingRawData)
names(trainingRawData$user_name)
summary(trainingRawData$user_name)
testingRawData <- testingRawData[,c(2,9:11,37:45,60:68,113:121,151:160)]
View(testingRawData)
names(trainingRawData)
install.packages("dplyr")
summary(trainingRawData$user_name)
library(dplyr)
pedroDataA = filter(trainingRawData, user_name == 'pedro', classe == 'A')
View(pedroDataA)
jeremyDataA = filter(trainingRawData, user_name == 'jeremy', classe == 'A')
View(jeremyDataA)
featurePlot(trainingRawData)
featurePlot(x=trainingRawData,y=trainingRawData, plot="pairs")
jeremyData = filter(trainingRawData, user_name == 'jeremy')
trainingRawData
jeremyData = filter(trainingRawData, user_name == 'jeremy')
knitr::opts_chunk$set(echo = FALSE)
library(knitr)
library(ggplot2)
library(caret)
library(car)
library(GGally)
library(dplyr)
set.seed(123)
trainingUrl <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testingUrl <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainingFile <- "traininig.csv"
testingFile <- "testing.csv"
jeremyData = filter(trainingRawData, user_name == 'jeremy')
featurePlot(x=trainingRawData,y=trainingRawData$classe, plot="pairs")
dataPartition  <- createDataPartition(trainingRawData$classe, p=0.7, list=FALSE)
trainSet <- trainingRawData[dataPartition, ]
testSet  <- trainingRawData[-dataPartition, ]
model<-train(classe~.,data=trainSet,method='gbm',preProcess='pca')
install.packages("e1071")
model<-train(classe~.,data=trainSet,method='gbm',preProcess='pca')
trainingRawData <- trainingRawData[,c(37:45,60:68,113:121,151:160)]
trainingRawData <- read.csv(trainingFile)
download.file(url=trainingUrl,destfile= trainingFile, quiet = TRUE)
download.file(url=testingUrl,destfile= testingFile, quiet = TRUE)
trainingRawData <- read.csv(trainingFile)
testingRawData  <- read.csv(testingFile)
trainingRawData <- trainingRawData[,c(37:45,60:68,113:121,151:160)]
dataPartition  <- createDataPartition(trainingRawData$classe, p=0.7, list=FALSE)
trainSet <- trainingRawData[dataPartition, ]
testSet  <- trainingRawData[-dataPartition, ]
model<-train(classe~.,data=trainSet,method='gbm',preProcess='pca')
pred<-predict(model,testSet)
confusionMatrix(pred,pred$classe)
confusionMatrix(pred,testSet$classe)
download.file(url=trainingUrl,destfile= trainingFile, quiet = TRUE)
download.file(url=testingUrl,destfile= testingFile, quiet = TRUE)
trainingRawData <- read.csv(trainingFile)
testingRawData  <- read.csv(testingFile)
trainingRawData <- trainingRawData[,c(2,9:11,37:45,60:68,113:121,151:160)]
dataPartition  <- createDataPartition(trainingRawData$classe, p=0.7, list=FALSE)
trainSet <- trainingRawData[dataPartition, ]
testSet  <- trainingRawData[-dataPartition, ]
model<-train(classe~.,data=trainSet,method='gbm',preProcess='pca')
pred<-predict(model,testSet)
confusionMatrix(pred,testSet$classe)
testingRawData <- testingRawData[,c(2,9:11,37:45,60:68,113:121,151:160)]
predtest<-predict(model,testingRawData)
predtest
modFitBoost <- train(classe ~ ., method = "gbm", data = trainSet,
verbose = F,
trControl = trainControl(method = "cv", number = 10))
predtestboost<-predict(modFitBoost,testSet)
confusionMatrix(predtestboost,testSet$classe)
model<-train(classe~.,data=trainSet,method='gbm')
pred<-predict(model,testSet)
confusionMatrix(pred,testSet$classe)
download.file(url=trainingUrl,destfile= trainingFile, quiet = TRUE)
download.file(url=testingUrl,destfile= testingFile, quiet = TRUE)
trainingRawData <- read.csv(trainingFile)
testingRawData  <- read.csv(testingFile)
trainingRawData <- trainingRawData[,c(37:45,60:68,113:121,151:160)]
dataPartition  <- createDataPartition(trainingRawData$classe, p=0.7, list=FALSE)
trainSet <- trainingRawData[dataPartition, ]
testSet  <- trainingRawData[-dataPartition, ]
model<-train(classe~.,data=trainSet,method='gbm',verbose = F)
pred<-predict(model,testSet)
confusionMatrix(pred,testSet$classe)
predtest<-predict(model,testingRawData)
confusionMatrix(predtest,testSet$classe)
knitr::opts_chunk$set(echo = FALSE)
library(knitr)
library(ggplot2)
library(caret)
library(car)
library(GGally)
library(dplyr)
set.seed(123)
trainingUrl <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testingUrl <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainingFile <- "traininig.csv"
testingFile <- "testing.csv"
download.file(url=trainingUrl,destfile= trainingFile, quiet = TRUE)
download.file(url=testingUrl,destfile= testingFile, quiet = TRUE)
trainingRawData <- read.csv(trainingFile)
testingRawData  <- read.csv(testingFile)
summary(trainingRawData$user_name)
participantsAMeanData = filter(
summarise(
select(
group_by(trainingRawData, user_name),
pitch_belt,yaw_belt
),
ma1 = mean(pitch_belt,na.rm = TRUE),
ma2 = mean(yaw_belt,na.rm = TRUE)
), classe == 'A')
participantsAMeanData <- filter(
summarise(
select(
group_by(trainingRawData, user_name),
pitch_belt,yaw_belt
),
ma1 = mean(pitch_belt,na.rm = TRUE),
ma2 = mean(yaw_belt,na.rm = TRUE)
),
classe == 'A'
)
View(trainSet)
participantsAMeanData <- filter(
summarise(
select(
group_by(trainingRawData, user_name),
pitch_belt,yaw_belt,classe
),
ma1 = mean(pitch_belt,na.rm = TRUE),
ma2 = mean(yaw_belt,na.rm = TRUE)
),
classe == 'A'
)
participantsAMeanData <- filter(
summarise(
select(
group_by(trainingRawData, user_name,classe),
pitch_belt,yaw_belt,classe
),
ma1 = mean(pitch_belt,na.rm = TRUE),
ma2 = mean(yaw_belt,na.rm = TRUE)
),
classe == 'A'
)
participantsAMeanData
participantsAMeanData <- filter(
summarise(
select(
group_by(trainingRawData, user_name,classe),
pitch_belt,yaw_belt
),
ma1 = mean(pitch_belt,na.rm = TRUE),
ma2 = mean(yaw_belt,na.rm = TRUE)
),
classe == 'A'
)
participantsAMeanData <- filter(
summarise(
select(
group_by(trainingRawData, user_name,classe),
pitch_belt,yaw_belt,total_accel_belt,gyros_belt_x,
gyros_belt_y,gyros_belt_z
),
m_pitch = mean(pitch_belt,na.rm = TRUE),
m_yaw = mean(yaw_belt,na.rm = TRUE)
m_accel = mean(total_accel_belt,na.rm = TRUE)
m_gyrosX = mean(gyros_belt_x,na.rm = TRUE)
m_gyrosY = mean(gyros_belt_y,na.rm = TRUE)
m_gyrosZ = mean(gyros_belt_z,na.rm = TRUE)
),
classe == 'A'
)
participantsAMeanData <- filter(
summarise(
select(
group_by(trainingRawData, user_name,classe),
pitch_belt,yaw_belt,total_accel_belt,gyros_belt_x,
gyros_belt_y,gyros_belt_z
),
m_pitch = mean(pitch_belt,na.rm = TRUE),
m_yaw = mean(yaw_belt,na.rm = TRUE),
m_accel = mean(total_accel_belt,na.rm = TRUE),
m_gyrosX = mean(gyros_belt_x,na.rm = TRUE),
m_gyrosY = mean(gyros_belt_y,na.rm = TRUE),
m_gyrosZ = mean(gyros_belt_z,na.rm = TRUE)
),
classe == 'A'
)
participantsAMeanData <- filter(
summarise(
select(
group_by(trainingRawData, user_name,classe),
pitch_belt,yaw_belt,total_accel_belt,gyros_belt_x,
gyros_belt_y,gyros_belt_z
),
m_pitch = mean(pitch_belt,na.rm = TRUE),
m_yaw = mean(yaw_belt,na.rm = TRUE),
m_accel = mean(total_accel_belt,na.rm = TRUE),
m_gyrosX = mean(gyros_belt_x,na.rm = TRUE),
m_gyrosY = mean(gyros_belt_y,na.rm = TRUE),
m_gyrosZ = mean(gyros_belt_z,na.rm = TRUE)
),
classe == 'A'
)
participantsAMeanData
plot(participantsAMeanData)
qplot(participantsAMeanData)
help(qplot)
help(x = c(3:8))
qplot(x = c(3:8))
qplot(x = c(m_pitch,m_yaw),data =participantsAMeanData)
qplot(x = c(m_pitch,m_yaw,m_accel,m_gyrosX,m_gyrosY,m_gyrosZ),data =participantsAMeanData)
qplot(x = c(m_pitch,m_yaw,m_accel,m_gyrosX,m_gyrosY,m_gyrosZ),y = c(m_pitch,m_yaw,m_accel,m_gyrosX,m_gyrosY,m_gyrosZ),data =participantsAMeanData)
qplot(x = c(m_pitch),y = c(user_name),data =participantsAMeanData)
qplot(x = c(user_name),y = c(m_pitch),data =participantsAMeanData)
g <- ggplot(participantsAMeanData$m_pitch, aes(participantsAMeanData$user_name))
g + geom_bar()
g <- ggplot(participantsAMeanData$m_pitch, aes(as.factor(participantsAMeanData$user_name)))
knitr::opts_chunk$set(echo = FALSE)
library(knitr)
library(ggplot2)
library(caret)
library(car)
library(GGally)
library(dplyr)
set.seed(123)
trainingUrl <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testingUrl <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainingFile <- "traininig.csv"
testingFile <- "testing.csv"
knitr::opts_chunk$set(echo = FALSE)
library(knitr)
library(caret)
library(car)
library(dplyr)
set.seed(123)
trainingUrl <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testingUrl <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainingFile <- "traininig.csv"
testingFile <- "testing.csv"
download.file(url=trainingUrl,destfile= trainingFile, quiet = TRUE)
download.file(url=testingUrl,destfile= testingFile, quiet = TRUE)
trainingRawData <- read.csv(trainingFile)
testingRawData  <- read.csv(testingFile)
participantsAMeanData <- filter(
summarise(
select(
group_by(trainingRawData, user_name,classe),
pitch_belt,yaw_belt,total_accel_belt,gyros_belt_x,
gyros_belt_y,gyros_belt_z
),
m_pitch = mean(pitch_belt,na.rm = TRUE),
m_yaw = mean(yaw_belt,na.rm = TRUE),
m_accel = mean(total_accel_belt,na.rm = TRUE),
m_gyrosX = mean(gyros_belt_x,na.rm = TRUE),
m_gyrosY = mean(gyros_belt_y,na.rm = TRUE),
m_gyrosZ = mean(gyros_belt_z,na.rm = TRUE)
),
classe == 'A'
)
participantsAMeanData
trainingData <- trainingRawData[,c(2,9:11,37:45,60:68,113:121,151:160)]
testingData <- testingRawData[,c(2,9:11,37:45,60:68,113:121,151:160)]
dataPartition  <- createDataPartition(trainingData$classe, p=0.7, list=FALSE)
trainSet <- trainingRawData[dataPartition, ]
testSet  <- trainingRawData[-dataPartition, ]
model<-train(classe~.,data=trainSet,method='gbm',verbose = F)
dataPartition  <- createDataPartition(trainingData$classe, p=0.7, list=FALSE)
trainSet <- trainingRawData[dataPartition, ]
testSet  <- trainingRawData[-dataPartition, ]
model<-train(classe~.,data=trainSet,method='gbm',verbose = F)
View(trainingData)
dataPartition  <- createDataPartition(trainingData$classe, p=0.7, list=FALSE)
trainSet <- trainingRawData[dataPartition, ]
testSet  <- trainingRawData[-dataPartition, ]
dataPartition  <- createDataPartition(trainingData$classe, p=0.7, list=FALSE)
trainSet <- trainingRawData[dataPartition, ]
testSet  <- trainingRawData[-dataPartition, ]
model<-train(classe~.,data=trainSet,method='gbm',verbose = F)
trainingData <- trainingRawData[,c(2,9:11,37:45,60:68,113:121,151:160)]
testingData <- testingRawData[,c(2,9:11,37:45,60:68,113:121,151:160)]
dataPartition  <- createDataPartition(trainingData$classe, p=0.7, list=FALSE)
trainSet <- trainingData[dataPartition, ]
testSet  <- trainingData[-dataPartition, ]
model<-train(classe~.,data=trainSet,method='gbm',verbose = F)
prediction<-predict(model,testSet)
confusionMatrix(prediction,testSet$classe)
predictionTest<-predict(model,testingData)
predictionTest
knitr::opts_chunk$set(echo = FALSE)
library(knitr)
library(caret)
library(car)
library(dplyr)
library(gbm)
library(splines)
library(survival)
library(parallel)
set.seed(123)
trainingUrl <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testingUrl <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainingFile <- "traininig.csv"
testingFile <- "testing.csv"
participantsAMeanData <- filter(
summarise(
select(
group_by(trainingRawData, 'user_name','classe'),
pitch_belt,yaw_belt,total_accel_belt,gyros_belt_x,
gyros_belt_y,gyros_belt_z,classe
),
m_pitch = mean(pitch_belt,na.rm = TRUE),
m_yaw = mean(yaw_belt,na.rm = TRUE),
m_accel = mean(total_accel_belt,na.rm = TRUE),
m_gyrosX = mean(gyros_belt_x,na.rm = TRUE),
m_gyrosY = mean(gyros_belt_y,na.rm = TRUE),
m_gyrosZ = mean(gyros_belt_z,na.rm = TRUE)
),
classe == 'A'
)
anscombeData1 <- data_frame(x=c(10.0,8.0,13.0,9.0,11.0,14.0,6.0,4.0,12.0,7.0,5.0),
y=c(8.04,6.95,7.58,8.81,8.33,9.96,7.24,4.26,10.84,4.82,5.68))
anscombeData1 <- data.frame(x=c(10.0,8.0,13.0,9.0,11.0,14.0,6.0,4.0,12.0,7.0,5.0),
y=c(8.04,6.95,7.58,8.81,8.33,9.96,7.24,4.26,10.84,4.82,5.68))
lm(anscombeData1)
plot(lm(anscombeData1))
plot(lm(anscombeData1))
fit <- lm(x ~ y, data = anscombeData1)
p1 <- plot_ly(anscombeData1, x = ~x, y = ~y,type="scatter", mode = 'markers') %>%
add_lines(x = ~x, y = fitted(fit))
knitr::opts_chunk$set(echo = TRUE)
library("plotly")
install.packages("plotly")
p1 <- plot_ly(anscombeData1, x = ~x, y = ~y,type="scatter", mode = 'markers') %>%
add_lines(x = , y = fitted(fit))
library("plotly")
library("tidyr")
library("dplyr")
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets)%>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets),4))
plot_ly(data = stocks, x= stocks$time, y = stocks$price, color = stocks$index,type="scatter",mode = "markers")
p1 <- plot_ly(anscombeData1, x = ~x, y = ~y,type="scatter", mode = 'markers') %>%
add_lines(x = , y = fitted(fit))
p1
lm(y ~ 3 + 0.5*x, data = anscombeData1)
lm(y ~ 3 + 0.5* anscombeData1$x, data = anscombeData1)
lm(y ~.3 + 0. 5* anscombeData1$x, data = anscombeData1)
lm(y ~.3 + 0.5 * anscombeData1$x, data = anscombeData1)
lm(formula = y ~.3 + 0.5 *x, data = anscombeData1)
lm(formula = y ~ 3 + 0.5 , data = anscombeData1)
lm(formula = y ~ 3+3 , data = anscombeData1)
fit <- lm(y ~ x, data = anscombeData1)
p1 <- plot_ly(anscombeData1, x = ~x, y = ~y,type="scatter", mode = 'markers') %>%
add_lines(x = , y = fitted(fit))
p1
p2 <- plot_ly(anscombeData2, x = ~x, y = ~y,type="scatter",mode = 'markers') %>%
add_lines(x = , y = fitted(fit),name = ~"distri2")
anscombeData1 <- data.frame(x=c(10.0,8.0,13.0,9.0,11.0,14.0,6.0,4.0,12.0,7.0,5.0),
y=c(8.04,6.95,7.58,8.81,8.33,9.96,7.24,4.26,10.84,4.82,5.68))
anscombeData2 <- data.frame(x=c(10.0,8.0,13.0,9.0,11.0,14.0,6.0,4.0,12.0,7.0,5.0),
y=c(9.14,8.14,8.74,8.77,9.26,8.10,6.13,3.10,9.13,7.26,4.74))
anscombeData3 <- data.frame(x=c(10.0,8.0,13.0,9.0,11.0,14.0,6.0,4.0,12.0,7.0,5.0),
y=c(7.46,6.77,12.74,7.11,7.81,8.84,6.08,5.39,8.15,6.42,5.73))
anscombeData4 <- data.frame(x=c(10.0,8.0,13.0,9.0,11.0,14.0,6.0,4.0,12.0,7.0,5.0),
y=c(6.58,5.76,7.71,8.84,8.47,7.04,5.25,12.50,5.56,7.91,6.89))
fit1 <- lm(y ~ x, data = anscombeData1)
fit2 <- lm(y ~ x, data = anscombeData2)
p1 <- plot_ly(anscombeData1, x = ~x, y = ~y,type="scatter", mode = 'markers') %>%
add_lines(x = , y = fitted(fit1),name = ~"distri1")
p2 <- plot_ly(anscombeData2, x = ~x, y = ~y,type="scatter",mode = 'markers') %>%
add_lines(x = , y = fitted(fit2),name = ~"distri2")
p <- subplot(p1, p2)
p
p <- subplot(p1, p2,p3,p4)
shiny::runApp('D:/Shared_raxonserver/workAndStudy/especialization/Data Science/9-Developing data products/Week4/Project/RshinyWeek4')
runApp('D:/Shared_raxonserver/workAndStudy/especialization/Data Science/9-Developing data products/Week4/Project/RshinyWeek4')
mtcars
shiny::runApp('D:/Shared_raxonserver/workAndStudy/especialization/Data Science/9-Developing data products/Week4/Project/RshinyWeek4')
